{
  "api/StormHawks.Runtime.Entity.EntityMovementSO.html": {
    "href": "api/StormHawks.Runtime.Entity.EntityMovementSO.html",
    "title": "Class EntityMovementSO | Developer Reference",
    "keywords": "Class EntityMovementSO Inheritance Object EntityMovementSO Namespace : StormHawks.Runtime.Entity Assembly : cs.temp.dll.dll Syntax public abstract class EntityMovementSO : ScriptableObject Properties FaceDirection Entity의 forward 방향 벡터 (length is 1) Declaration public Vector3 FaceDirection { get; set; } Property Value Type Description Vector3 MaxDrivingForce Entity가 움직일 때 가해지는 추진력의 최대량 Declaration public float MaxDrivingForce { get; } Property Value Type Description Single MinDrivingForce Entity가 움직일 때 가해지는 추진력의 최소량 Declaration public float MinDrivingForce { get; } Property Value Type Description Single MoveTransitionValue Entity의 현재 Velocity에서 FaceDirection으로 Velocity 벡터가 변화할 때 변화량 Declaration public float MoveTransitionValue { get; } Property Value Type Description Single Position Declaration public Vector3 Position { get; } Property Value Type Description Vector3 RotateTransitionValue Entity의 현재 forward에서 FaceDirection으로 회전할 때 변화량 Declaration public float RotateTransitionValue { get; } Property Value Type Description Single Velocity Entity의 움직이는 속도 Declaration public Vector3 Velocity { get; set; } Property Value Type Description Vector3 Methods UpdatePosition(Vector3) Declaration public void UpdatePosition(Vector3 newPos) Parameters Type Name Description Vector3 newPos"
  },
  "api/StormHawks.Runtime.Entity.html": {
    "href": "api/StormHawks.Runtime.Entity.html",
    "title": "Namespace StormHawks.Runtime.Entity | Developer Reference",
    "keywords": "Namespace StormHawks.Runtime.Entity Classes EntityMovementSO"
  },
  "api/StormHawks.Runtime.Player.html": {
    "href": "api/StormHawks.Runtime.Player.html",
    "title": "Namespace StormHawks.Runtime.Player | Developer Reference",
    "keywords": "Namespace StormHawks.Runtime.Player Classes PlayerInteractSO PlayerMovementSO"
  },
  "api/StormHawks.Runtime.Player.PlayerInteractSO.html": {
    "href": "api/StormHawks.Runtime.Player.PlayerInteractSO.html",
    "title": "Class PlayerInteractSO | Developer Reference",
    "keywords": "Class PlayerInteractSO Inheritance Object PlayerInteractSO Namespace : StormHawks.Runtime.Player Assembly : cs.temp.dll.dll Syntax public class PlayerInteractSO : ScriptableObject Properties Radius Declaration public float Radius { get; } Property Value Type Description Single Methods SetRadius(Single) Declaration public void SetRadius(float newVal) Parameters Type Name Description Single newVal"
  },
  "api/StormHawks.Runtime.Player.PlayerMovementSO.html": {
    "href": "api/StormHawks.Runtime.Player.PlayerMovementSO.html",
    "title": "Class PlayerMovementSO | Developer Reference",
    "keywords": "Class PlayerMovementSO Inheritance Object PlayerMovementSO Namespace : StormHawks.Runtime.Player Assembly : cs.temp.dll.dll Syntax public class PlayerMovementSO : EntityMovementSO"
  },
  "index.html": {
    "href": "index.html",
    "title": "BehaviorTree | Developer Reference",
    "keywords": "BehaviorTree"
  },
  "manual/formatting-code.html": {
    "href": "manual/formatting-code.html",
    "title": "Formatting Code | Developer Reference",
    "keywords": "Formatting Code 저희는 dotnet/format 을 사용해서 코드를 관리합니다. 저희 repository에서 code format을 확인한 후, 그 결과가 approved 될 경우에만 main 브랜치에 머지가 됩니다. 위의 dotnet-format 을 사용하기 위해서는 먼저 설치를 해야합니다. 설치하는 방법은 아래와 같습니다. dotnet tool install -g dotnet-format --version 5.0.142902 --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json 그 이후 Unity에서 생성해준 .csproj 파일의 위치에서 아래의 명령을 입력하면 자동으로 code를 format해줍니다. dotnet-format ClearSkies.sln --fix-style warn 만약 위의 커맨드를 입력하고도, Code formatting 체크를 통과하지 못한다면 아래의 커맨드를 입력해보세요 :) dotnet format whitespace --folder --verbosity n"
  }
}